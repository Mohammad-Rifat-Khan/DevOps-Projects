name: Build, Test, and Deploy to ECS

on:
  push:
    branches:
      - main
      - master

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16.18.1'

    - name: Install dependencies
      run: npm install
      working-directory: sample-nodejs-app

    #- name: Run tests
     # run: npm test
      #working-directory: sample-nodejs-app

    #- name: Lint
     # run: npm run lint
      #working-directory: sample-nodejs-app

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set deployment environment variables
      run: |
        # Get the current branch name from github.ref_name
        BRANCH="${{ github.ref_name }}"
        echo "GITHUB_CURRENT_BRANCH=$BRANCH" >> $GITHUB_ENV
        if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "master" ]; then
          echo "MODE=DEV" >> $GITHUB_ENV
          echo "ECS_SERVICE=sample-nodejs-app-taskDef-service" >> $GITHUB_ENV
          echo "ECS_CLUSTER=sample-nodejs-app-cluster" >> $GITHUB_ENV
        else
          echo "MODE=DEV" >> $GITHUB_ENV
          echo "ECS_SERVICE=development-service" >> $GITHUB_ENV
          echo "ECS_CLUSTER=DevelopmentCluster" >> $GITHUB_ENV
        fi

    - name: Build, tag, and push Docker image
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        MODE: ${{ env.MODE }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        ECS_CLUSTER: ${{ env.ECS_CLUSTER }}
        ECS_SERVICE: ${{ env.ECS_SERVICE }}
        GITHUB_CURRENT_BRANCH: ${{ env.GITHUB_CURRENT_BRANCH }}
      run: |
        set -e  # Stop script on first error
        IMAGE_TAG=$GITHUB_CURRENT_BRANCH
        # Adjust build context to 'sample-nodejs-app' if that's where the Dockerfile is
        docker build --build-arg MODE=$MODE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG sample-nodejs-app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to Amazon ECS
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        ECS_CLUSTER: ${{ env.ECS_CLUSTER }}
        ECS_SERVICE: ${{ env.ECS_SERVICE }}
      run: |
        set -e
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment --region $AWS_REGION
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE --region $AWS_REGION
